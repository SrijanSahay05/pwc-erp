# Generated by Django 5.1.7 on 2025-03-12 21:10

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('applicant', 'Applicant')], db_index=True, max_length=10)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('phone', models.PositiveIntegerField(db_index=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_number', models.PositiveIntegerField(db_index=True, unique=True)),
                ('form_number', models.PositiveIntegerField(db_index=True, unique=True)),
                ('application_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved')], db_index=True, max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EducationInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_appearing', models.BooleanField(default=False)),
                ('intermediate_school_name', models.CharField(max_length=100)),
                ('intermediate_school_board', models.CharField(max_length=100)),
                ('intermdiate_grade', models.CharField(max_length=100)),
                ('intermediaate_roll_number', models.PositiveIntegerField(db_index=True, unique=True)),
                ('intermediate_obtained_marks', models.PositiveIntegerField()),
                ('intermediate_total_marks', models.PositiveIntegerField()),
                ('intermediate_percentage', models.FloatField(db_index=True)),
                ('intermediate_year_of_passing', models.PositiveIntegerField(db_index=True)),
                ('intermediate_certificate_image', models.ImageField(upload_to='intermediate_certificates/')),
                ('lastappearingexam_institution_name', models.CharField(max_length=100)),
                ('lastappearingexam_place', models.CharField(max_length=100)),
                ('lastappearingexam_board', models.CharField(max_length=100)),
                ('lastappearingexam_year_of_passing', models.PositiveIntegerField(db_index=True)),
                ('lastappearingexam_marksheet_image', models.ImageField(upload_to='lastappearingexam_marksheets/')),
                ('extra_curricular_activities', models.CharField(blank=True, choices=[('NCC', 'NCC'), ('LITERACY', 'Literacy Program'), ('NSS', 'NSS'), ('ATHLETICS', 'Athletics'), ('CULTURAL', 'Cultural Activity'), ('ENVIRONMENT', 'Environment Protection Program'), ('GAMES', 'Games')], db_index=True, help_text='Enter comma separated values for multiple activities', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PersonalInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_image', models.ImageField(upload_to='user_profile_images/')),
                ('dob', models.DateField(db_index=True)),
                ('gender', models.CharField(max_length=10)),
                ('nationality', models.CharField(max_length=100)),
                ('religion', models.CharField(max_length=100)),
                ('aadhar_card', models.PositiveIntegerField(db_index=True, unique=True)),
                ('father_name', models.CharField(max_length=100)),
                ('father_qualification', models.CharField(max_length=100)),
                ('father_occupation', models.CharField(max_length=100)),
                ('father_contact', models.PositiveIntegerField(db_index=True, unique=True)),
                ('mother_name', models.CharField(max_length=100)),
                ('mother_qualification', models.CharField(max_length=100)),
                ('mother_occupation', models.CharField(max_length=100)),
                ('mother_contact', models.PositiveIntegerField(db_index=True, unique=True)),
                ('guardian_name', models.CharField(max_length=100)),
                ('guardian_relation', models.CharField(max_length=100)),
                ('guardian_occupation', models.CharField(max_length=100)),
                ('guardian_contact', models.PositiveIntegerField(db_index=True, unique=True)),
                ('permanentAddress_Country', models.CharField(max_length=100)),
                ('permanentAddress_State', models.CharField(max_length=100)),
                ('permanentAddress_City', models.CharField(max_length=100)),
                ('permanentAddress_PinCode', models.PositiveIntegerField(db_index=True, unique=True)),
                ('permanentAddress_Address', models.TextField()),
                ('is_same_as_permanentAddress', models.BooleanField(default=False)),
                ('currentAddress_Country', models.CharField(max_length=100)),
                ('currentAddress_State', models.CharField(max_length=100)),
                ('currentAddress_City', models.CharField(max_length=100)),
                ('currentAddress_PinCode', models.PositiveIntegerField(db_index=True, unique=True)),
                ('currentAddress_Address', models.TextField()),
                ('blood_group', models.CharField(max_length=10)),
                ('casteCategory', models.CharField(db_index=True, max_length=100)),
                ('caste', models.CharField(max_length=100)),
                ('caste_or_ews_certificate_issued_by', models.CharField(max_length=100)),
                ('caste_or_ews_certificate_number', models.PositiveIntegerField(db_index=True, unique=True)),
                ('caste_or_ews_certificate_image', models.ImageField(upload_to='caste_or_ews_certificates/')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['user_type', 'email'], name='users_custo_user_ty_ba3734_idx'),
        ),
        migrations.AddIndex(
            model_name='application',
            index=models.Index(fields=['application_status', 'created_at'], name='users_appli_applica_c6ef6b_idx'),
        ),
        migrations.AddIndex(
            model_name='educationinfo',
            index=models.Index(fields=['intermediate_percentage', 'intermediate_year_of_passing'], name='users_educa_interme_ff943d_idx'),
        ),
        migrations.AddIndex(
            model_name='educationinfo',
            index=models.Index(fields=['extra_curricular_activities', 'created_at'], name='users_educa_extra_c_2cee07_idx'),
        ),
        migrations.AddIndex(
            model_name='personalinfo',
            index=models.Index(fields=['casteCategory', 'created_at'], name='users_perso_casteCa_27518b_idx'),
        ),
    ]
